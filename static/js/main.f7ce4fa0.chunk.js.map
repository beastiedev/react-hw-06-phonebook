{"version":3,"sources":["redux/contactForm/contactFormActions.js","components/ContactForm/index.js","components/ContactItem/index.jsx","components/ContactList/index.js","components/Filter/index.js","redux/contactForm/contactFormHandlers.js","redux/contactForm/contactFormReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","createAction","onChangeName","onChangeNumber","onDelete","onFilter","onRestore","connect","state","name","contactForm","number","contactFormActions","className","e","preventDefault","uuid_v4","type","onChange","target","value","ContactItem","item","onClick","id","ContactList","items","filter","RegExp","test","map","key","defaultProps","contacts","initialState","storeContacts","localStorage","setItem","JSON","stringify","reducer","createReducer","payload","contact","length","alert","delContactsItems","storedContacts","parse","getItem","restoreContacts","store","configureStore","App","dispatch","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7ce4fa0.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const onSubmit = createAction('contacts/submit');\nexport const onChangeName = createAction('contacts/change-name');\nexport const onChangeNumber = createAction('contacts/change-number');\nexport const onDelete = createAction('contacts/delete');\nexport const onFilter = createAction('contacts/filter');\nexport const onRestore = createAction('contacts/restore');\n","import React from 'react';\nimport { v4 as uuid_v4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport * as contactFormActions from '../../redux/contactForm/contactFormActions';\n\nconst ContactForm = ({ name, number, onSubmit, onChangeName, onChangeNumber }) => {\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(uuid_v4());\n  };\n\n  return (\n    <form className=\"contact-form\" onSubmit={handleOnSubmit}>\n      <p>Name</p>\n      <p>\n        <input name=\"name\" type=\"text\" onChange={(e) => onChangeName(e.target.value)} value={name} />\n      </p>\n      <p>Number</p>\n      <p>\n        <input name=\"number\" type=\"text\" onChange={(e) => onChangeNumber(e.target.value)} value={number} />\n      </p>\n      <p>\n        <button>Add contact</button>\n      </p>\n    </form>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.contactForm.name,\n  number: state.contactForm.number\n});\n\nexport default connect(mapStateToProps, contactFormActions)(ContactForm);\n","import React from \"react\";\n\nconst ContactItem = ({ item, onDelete }) => {\n  return (\n    <li>\n      {item.name}: {item.number}{\" \"}\n      <button onClick={() => onDelete(item.id)}>delete</button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem';\nimport { onDelete } from '../../redux/contactForm/contactFormActions';\n\nconst ContactList = ({ items, filter, onDelete }) => {\n  const filteredItems = () => {\n    return items.filter((item) => new RegExp(`${filter}`, 'i').test(item.name));\n  };\n\n  return (\n    <ul className=\"contact-list\">\n      {filteredItems().map((item) => {\n        return <ContactItem key={item.id} item={item} onDelete={() => onDelete(item.id)} />;\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.oneOfType([ PropTypes.string ]),\n      name: PropTypes.string\n    })\n  )\n};\n\nContactList.defaultProps = {\n  contacts: []\n};\n\nconst mapStateToProps = (state) => ({\n  items: state.contactForm.contacts.items,\n  filter: state.contactForm.contacts.filter\n});\n\nexport default connect(mapStateToProps, { onDelete })(ContactList);\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { onFilter } from '../../redux/contactForm/contactFormActions';\n\nconst Filter = ({ filter, onFilter }) => {\n  return (\n    <Fragment>\n      <div>Find contacts by name</div>\n      <input type=\"text\" name=\"filter\" value={filter} onChange={(e) => onFilter(e.target.value)} />\n    </Fragment>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  filter: state.contactForm.contacts.filter\n});\n\nexport default connect(mapStateToProps, { onFilter })(Filter);\n","export const initialState = {\n  name: '',\n  number: '',\n  contacts: {\n    items: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' }\n    ],\n    filter: ''\n  }\n};\n\nconst LOCAL_STORAGE_KEY = 'contactsList';\n\nconst storeContacts = (contacts) => {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n};\n\nconst restoreContacts = () => {\n  const contacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n  return contacts ? contacts : initialState.contacts.items;\n};\n\n// reduser's handlers\nexport const handleChangeName = (state, { payload: name }) => ({ ...state, name });\n\nexport const handleChangeNumber = (state, { payload: number }) => ({ ...state, number });\n\nexport const handleSubmit = (state, { payload: id }) => {\n  if (!state.name) {\n    return state;\n  }\n\n  if (state.contacts.items.filter((contact) => contact.name === state.name).length) {\n    alert(`${state.name} is already in contacts`);\n    return state;\n  }\n\n  const contact = {\n    id: id,\n    name: state.name,\n    number: state.number\n  };\n  const contacts = { ...state.contacts, items: [ ...state.contacts.items, contact ] };\n\n  storeContacts(contacts.items);\n\n  return { ...state, contacts, name: '', number: '', filter: '' };\n};\n\nexport const handleDelete = (state, { payload: id }) => {\n  const delContactsItems = state.contacts.items.filter((item) => item.id !== id);\n  const contacts = { ...state.contacts, items: delContactsItems };\n\n  storeContacts(delContactsItems);\n\n  return { ...state, contacts };\n};\n\nexport const handleFilter = (state, { payload: filter }) => {\n  return { ...state, contacts: { ...state.contacts, filter } };\n};\n\nexport const handleRestore = (state) => {\n  const storedContacts = restoreContacts();\n  return {\n    ...state,\n    contacts: { ...state.contacts, items: [ ...storedContacts ] }\n  };\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { onChangeName, onChangeNumber, onSubmit, onDelete, onFilter, onRestore } from './contactFormActions';\nimport {\n  initialState,\n  handleChangeName,\n  handleChangeNumber,\n  handleDelete,\n  handleFilter,\n  handleRestore,\n  handleSubmit\n} from './contactFormHandlers';\n\n// reducers\n\nconst reducer = createReducer(initialState, {\n  [onChangeName]: handleChangeName,\n  [onChangeNumber]: handleChangeNumber,\n  [onSubmit]: handleSubmit,\n  [onDelete]: handleDelete,\n  [onFilter]: handleFilter,\n  [onRestore]: handleRestore\n});\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactForm from './contactForm/contactFormReducer';\n\nconst store = configureStore({\n  reducer: {\n    contactForm\n  }\n});\n\nexport default store;\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport store from './redux/store';\nimport { onRestore } from './redux/contactForm/contactFormActions';\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(onRestore());\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <h1>Phonebook</h1>\n          <ContactForm />\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}